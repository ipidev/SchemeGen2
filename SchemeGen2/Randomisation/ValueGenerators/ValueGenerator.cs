using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SchemeGen2.Randomisation.ValueGenerators
{
    /// <summary>
    /// The base class for a value generator. Objects deriving from this type
    /// can be used to generate values for use in the scheme.
    /// </summary>
    abstract class ValueGenerator
    {
        /// <summary>
        /// Constructs a new value generator.
        /// </summary>
        protected ValueGenerator()
        {
        }

        /// <summary>
        /// The value that was previously generated by a call to GenerateByte().
        /// </summary>
        public int GeneratedValue { get; private set; }

        /// <summary>
        /// Generates and returns a value for use in the scheme.
        /// </summary>
        /// <returns>A byte value.</returns>
        public int GenerateValue(Random rng)
        {
            GeneratedValue = InternalGenerateValue(rng);
            return GeneratedValue;
        }

        /// <summary>
        /// When overridden in a deriving type, generates a value for use in the scheme.
        /// </summary>
        /// <returns>A byte value.</returns>
        protected abstract int InternalGenerateValue(Random rng);

        /// <summary>
        /// When overridden in a deriving type, returns if the value generator's output range overlaps with the given range.
        /// </summary>
        public abstract bool DoesValueRangeOverlap(int? min, int? max);

        /// <summary>
        /// When overridden in a deriving type, modifies the value generator such that it will return a value within the given range.
        /// </summary>
        public abstract void GuaranteeValueRange(int? min, int? max);

        /// <summary>
        /// Returns a copy of the value generator.
        /// </summary>
        public abstract ValueGenerator DeepClone();
    }

    enum ValueGeneratorTypes
    {
        Null,
        Constant,
        Range,
        Boolean,
        CoinFlip,
        WeightedSelector,

        Count
    }
}
